version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: copilot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: copilot_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - copilot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go API Service (Placeholder)
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: copilot-api
    restart: unless-stopped
    volumes:
      - ./backend:/app
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - copilot-network
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: copilot_db

  # React Frontend Service (Placeholder)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: copilot-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - copilot-network

# Define volumes
volumes:
  postgres_data:
    driver: local

# Define networks
networks:
  copilot-network:
    driver: bridge